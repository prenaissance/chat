// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String          @id @default(cuid())
    name                   String
    email                  String?         @unique
    emailVerified          DateTime?
    image                  String?
    createdAt              DateTime        @default(now())
    accounts               Account[]
    sessions               Session[]
    groups                 Group[]
    sentMessages           Message[]       @relation("SentMessages")
    readMessages           Message[]       @relation("ReadMessages")
    receivedMessages       Message[]       @relation("UserMessages")
    conversations          Conversation[]  @relation("UserConversations")
    targetConversations    Conversation[]  @relation("UserTargetConversations")
    sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
    receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum MessageSource {
    User
    System
}

enum MessageTarget {
    User
    Group
}

model FriendRequest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    fromId    String
    from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
    toId      String
    to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
    accepted  Boolean  @default(false)

    @@unique([fromId, toId])
    @@index([fromId])
    @@index([toId])
}

model Group {
    id                  String         @id @default(cuid())
    createdAt           DateTime       @default(now())
    name                String
    users               User[]
    messages            Message[]      @relation("GroupMessages")
    targetConversations Conversation[]
}

// polymorphism was hard to achieve with prisma. subpar solution, will use mongoose next time
model Message {
    id            String         @id @default(cuid())
    createdAt     DateTime       @default(now())
    source        MessageSource
    content       String
    fromId        String
    from          User           @relation("SentMessages", fields: [fromId], references: [id])
    targetType    MessageTarget
    targetUserId  String?
    targetUser    User?          @relation("UserMessages", fields: [targetUserId], references: [id])
    targetGroupId String?
    targetGroup   Group?         @relation("GroupMessages", fields: [targetGroupId], references: [id])
    readBy        User[]         @relation("ReadMessages")
    Conversation  Conversation[]

    @@index(createdAt, type: BTree)
    @@index([targetType, targetUserId], name: "targetUserIndex")
    @@index([targetType, targetGroupId], name: "targetGroupIndex")
}

// denormalized table for easier querying
model Conversation {
    id            String        @id @default(cuid())
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    userId        String
    user          User          @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
    lastMessageId String?
    lastMessage   Message?      @relation(fields: [lastMessageId], references: [id])
    unreadCount   Int           @default(0)
    targetType    MessageTarget
    targetUserId  String?
    targetUser    User?         @relation("UserTargetConversations", fields: [targetUserId], references: [id])
    targetGroupId String?
    targetGroup   Group?        @relation(fields: [targetGroupId], references: [id])

    @@unique([userId, targetType, targetUserId])
    @@unique([userId, targetType, targetGroupId])
    @@index([targetType, targetUserId], name: "conversationUserTargetIndex")
    @@index([targetType, targetGroupId], name: "conversationGroupTargetIndex")
    @@index([userId])
}
