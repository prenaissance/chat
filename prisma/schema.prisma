// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    groups        Group[]
    messages      Message[] @relation("UserMessages")
    Message       Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum MessageSource {
    User
    System
}

enum MessageTarget {
    User
    Group
}

model Group {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    name      String
    users     User[]
    messages  Message[] @relation("GroupMessages")
}

model Message {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    source      MessageSource
    content     String
    userId      String
    user        User?         @relation(fields: [userId], references: [id])
    targetType  MessageTarget
    targetId    String
    targetUser  User?         @relation("UserMessages", fields: [targetId], references: [id], map: "userMessageId")
    targetGroup Group?        @relation("GroupMessages", fields: [targetId], references: [id], map: "groupMessageId")

    @@index(createdAt, type: BTree)
}
